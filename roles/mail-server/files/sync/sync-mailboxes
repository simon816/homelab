#!/usr/bin/env python3

from collections import defaultdict
import sys
import os
import pickle
from hashlib import md5

import doveadm
from envelope_reader import EnvelopeReader

# Mailbox prefix that the remote is mapped to
REMOTE_PREFIX = 'Remote'
# mailbox on the remote for incoming remote mail
INCOMING_REMOTE = 'Incoming'
# local mailbox for missed incoming remote mail
INCOMING_IMPORT = 'INBOX'
# Mailbox for a copy of recent mail
REMOTE_RECENT = 'Incoming.Recent'
# Filter to identify emails delivered to remote
REMOTE_DELIVERED = ('header', 'Delivered-To', 'simon816@posteo.net')
# Do not sync these mailboxes to remote
IGNORE_LOCAL = ('Junk',)
IGNORE_WILDCARD = ('Archive',)
# Do not delete these remote mailboxes
IGNORE_REMOTE = (*IGNORE_LOCAL, INCOMING_REMOTE, REMOTE_RECENT)
# Ignore changes to these flags
IGNORE_FLAGS = set(('\\Recent',))
# Apply changes to this many mails at a time
BATCH_SIZE = 1000
CACHE_PATH = '/etc/dovecot/sync/env_cache'

"""
Future enhancements:
Skip if mailbox unchanged since last run
Maybe trigger when mailbox changed rather than cron
"""

class ChangeSet:

    def __init__(self):
        self.mail_actions = defaultdict(list)

    def set_flags(self, key, flags, mailbox, uid):
        self.mail_actions[key].append(('flags', flags, mailbox, uid))

    def add_delete(self, key, mailbox, uid):
        self.mail_actions[key].append(('delete', mailbox, uid))

    def add_copy(self, key, src_mailbox, src_uid, dest_mailbox):
        self.mail_actions[key].append(('copy', src_mailbox, src_uid, dest_mailbox))

    def apply(self):
        move_targets = defaultdict(lambda: defaultdict(list))
        flag_targets = defaultdict(lambda: defaultdict(list))
        copy_targets = defaultdict(lambda: defaultdict(list))
        delete_targets = defaultdict(list)
        n_deletes = 0
        for k, actions in self.mail_actions.items():
            actions = self.rewrite_move(actions)
            for (atype, *args) in actions:
                if atype == 'flags':
                    flags, mailbox, uid = args
                    flag_targets[flags][mailbox].append(uid)
                elif atype == 'delete':
                    n_deletes += 1
                    if n_deletes > 1000:
                        if n_deletes == 1001:
                            print("Over 1000 deletes. Limiting to first 1000")
                        continue
                    mailbox, uid = args
                    delete_targets[mailbox].append(uid)
                elif atype == 'copy':
                    src_mb, src_uid, dest_mb = args
                    copy_targets[dest_mb][src_mb].append(src_uid)
                elif atype == 'move':
                    src_mb, src_uid, dest_mb = args
                    move_targets[dest_mb][src_mb].append(src_uid)

        for flags, searchdict in flag_targets.items():
            for search in chunked_search(searchdict):
                doveadm.set_flags(' '.join(flags), search)

        for dest_mb, searchdict in copy_targets.items():
            for search in chunked_search(searchdict):
                doveadm.copy(dest_mb, search)

        for dest_mb, searchdict in move_targets.items():
            for search in chunked_search(searchdict):
                doveadm.move(dest_mb, search)

        if delete_targets:
            for search in chunked_search(delete_targets):
                doveadm.delete(search)

    def rewrite_move(self, actions):
        sources = [a[1:] for a in actions if a[0] == 'delete']
        if not sources:
            return actions
        copies = [a[1:] for a in actions if a[0] == 'copy']
        if not copies:
            return actions

        source = sources.pop(0)
        first_copy = copies.pop(0)

        # keep unrelated actions
        new_actions = [a for a in actions if a[0] not in ('delete', 'copy')]
        # If we have more than one copy, do those with the remove src first
        for cp in copies:
            new_actions.append(('copy', source[0], source[1], cp[2]))
        # transform the first copy into a move
        new_actions.append(('move', source[0], source[1], first_copy[2]))
        # If we have more than one delete, do the rest too
        for d in sources:
            new_actions.append(('delete', *d))
        return new_actions

def create_mb_search(mailbox, uidlist):
    search = ['mailbox', mailbox]
    search.extend(doveadm.search_or(*(['uid', uid] for uid in uidlist)))
    return search

def chunked_search(searchdict):
    for mailbox, uidlist in searchdict.items():
        for i in range(0,  len(uidlist), BATCH_SIZE):
            search = create_mb_search(mailbox, uidlist[i:i + BATCH_SIZE])
            yield search

def flag_set(flags):
    if not flags:
        return frozenset()
    return frozenset(set(flags.decode('utf8').split(' ')) - IGNORE_FLAGS)

class EnvelopeCache:

    def __init__(self):
        self.mapping = {}

    def key_for(self, r, env_data):
        env_hash = md5(env_data).digest()
        if env_hash not in self.mapping:
            env = r.read_envelope(env_data)
            if env.date is not None:
                dt = env.date.isoformat().encode('utf8')
            else:
                dt = b'\0'
            value_hash = md5(env.message_id + b'\0' + dt).digest()
            self.mapping[env_hash] = value_hash
        return self.mapping[env_hash]

def sync_mailbox(r, changeset, mailbox, remote_boxes):
    if mailbox in IGNORE_LOCAL or any(mailbox.startswith(s) for s in IGNORE_WILDCARD):
        return

    print("Doing", mailbox, flush=True)
    local = {}

    remote_mailbox = REMOTE_PREFIX + '.' + mailbox
    if remote_mailbox not in remote_boxes:
        doveadm.create_mailbox(remote_mailbox)
    else:
        remote_boxes.remove(remote_mailbox)

    for mail in doveadm.fetch('uid imap.envelope flags', ['mailbox', mailbox, 'not', 'deleted']):
        local[c.key_for(r, mail['imap.envelope'])] = { 'uid': mail['uid'], 'flags': flag_set(mail['flags']) }

    for mail in doveadm.fetch('uid imap.envelope flags', ['mailbox', remote_mailbox, 'all']):
        k = c.key_for(r, mail['imap.envelope'])
        if k in local:
            l_mail = local[k]
            if l_mail['flags'] != flag_set(mail['flags']):
                changeset.set_flags(k, l_mail['flags'], remote_mailbox, mail['uid'])
            del local[k]
        else:
            # Delete from remote
            changeset.add_delete(k, remote_mailbox, mail['uid'])

    # Copy local -> remote
    for k, mail in local.items():
        changeset.add_copy(k, mailbox, mail['uid'], remote_mailbox)

def sync_incoming(r):
    mails = doveadm.fetch('uid imap.envelope', ['mailbox', REMOTE_PREFIX + '.' + INCOMING_REMOTE, 'all'])

    delete_list = []
    move_list = []
    for mail in mails:
        uid = mail['uid']
        env = r.read_envelope(mail['imap.envelope'])
        if env.message_id is None:
            print("Unable to get Message-ID:", mail['imap.envelope'])
            continue
        # TODO possibly SENTON
        print("[%s]" % uid.decode('utf8'), "Message", env.message_id)
        search = doveadm.search(['header', 'Message-ID', env.message_id])
        if len(list(search)):
            # If we have the email, delete from remote
            print("Already got, deleting remote")
            delete_list.append(uid)
        else:
            # Otherwise, we move it from remote to local
            print("Missing, importing from remote")
            # Possibly use import instead:
            # sudo doveadm import -u simon maildir:~/Maildir "Posteo" mailbox "simon816"
            move_list.append(uid)

    if len(delete_list):
        search = ['mailbox', REMOTE_PREFIX + '.' + INCOMING_REMOTE]
        search.extend(doveadm.search_or(*(['uid', uid] for uid in delete_list)))
        doveadm.delete(search)

    if len(move_list):
        search = ['mailbox', REMOTE_PREFIX + '.' + INCOMING_REMOTE]
        search.extend(doveadm.search_or(*(['uid', uid] for uid in move_list)))
        doveadm.move(INCOMING_IMPORT, search)

    # Look for mails we imported because they were missing, that later became duplicates
    mails = doveadm.fetch('uid imap.envelope', ['mailbox', INCOMING_IMPORT, *REMOTE_DELIVERED])
    delete_list = []

    for mail in mails:
        uid = mail['uid']
        env = r.read_envelope(mail['imap.envelope'])
        search = doveadm.search(['header', 'Message-ID', env.message_id, 'not', *REMOTE_DELIVERED])
        if len(list(search)):
            print("[%s] %s already exists, removing from inbox" % (uid, env.message_id))
            # Another email exists with this message ID, delete from local
            delete_list.append(uid)

    if len(delete_list):
        search = ['mailbox', INCOMING_IMPORT]
        search.extend(doveadm.search_or(*(['uid', uid] for uid in delete_list)))
        doveadm.delete(search)

def prune_recent():
    print("Pruning recent mail mailbox")
    doveadm.delete(['mailbox', REMOTE_PREFIX + '.' + REMOTE_RECENT, 'BEFORE', '30d'])

def get_remote_boxes():
    # Use status since mailbox list also returns intermediate namespaces
    mboxes = doveadm.status('uidnext', REMOTE_PREFIX + '.*')
    return set(mboxes.keys()) - set(REMOTE_PREFIX + '.' + mb for mb in IGNORE_REMOTE)

def sync_all_mailboxes(r, changeset):
    remote_boxes = get_remote_boxes()

    for mailbox in doveadm.get_mailboxes():
        sync_mailbox(r, changeset, mailbox, remote_boxes)

    changeset.apply()

    if remote_boxes:
        if len(remote_boxes) > 10:
            raise Exception("Refusing to delete many mailboxes: %s" % remote_boxes)
        if len(remote_boxes) > 3:
            print("Attempt to delete many mailboxes. Only deleting 1.", remote_boxes)
            remote_boxes = [next(iter(remote_boxes))]
        doveadm.delete_mailbox(*remote_boxes)


if __name__ == '__main__':
    if os.path.exists(CACHE_PATH):
        try:
            with open(CACHE_PATH, 'rb') as f:
                c = pickle.load(f)
        except:
            c = EnvelopeCache()
    else:
        c = EnvelopeCache()
    r = EnvelopeReader()
    changeset = ChangeSet()
    if len(sys.argv) > 1:
        for mailbox in sys.argv[1:]:
            if mailbox == INCOMING_REMOTE:
                sync_incoming(r)
            else:
                sync_mailbox(r, changeset, mailbox, get_remote_boxes())
        changeset.apply()
    else:
        sync_incoming(r)
        sync_all_mailboxes(r, changeset)
        prune_recent()

    with open(CACHE_PATH, 'wb') as f:
        pickle.dump(c, f)
