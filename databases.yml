---
- hosts: dbserver
  pre_tasks:

  - name: Ensure secondary disk configured
    become: yes
    parted:
      device: /dev/disk/by-path/pci-0000:02:00.0
      number: 1
      state: present

  - name: Ensure secondary disk filesystem
    become: yes
    filesystem:
      dev: /dev/disk/by-path/pci-0000:02:00.0-part1
      fstype: ext4

  - name: Mount secondary disk
    become: yes
    mount:
      fstype: ext4
      src: /dev/disk/by-path/pci-0000:02:00.0-part1
      path: /srv
      state: mounted

  - name: Set hostname
    become: yes
    hostname:
      name: dbserver.simon816.com

  roles:
    - intnet-node
    - mail-forwarder
    - naemon-remote
    - auto-updates
    - mariadb
    - mongodb
    - postgres
    - role: backup-spool
      vars:
        backup_scripts:
          mariadb: |
            destdir="$basedir/$name"
            if [[ -d "$destdir" ]]
            then
              echo "Skipping mariadb backup"
              return
            fi
            mkdir "$destdir"
            sudo -u mysql mysqldump -u root --single-transaction --add-drop-database --all-databases > "$destdir/databases.sql"
          postgres: |
            destdir="$basedir/$name"
            if [[ -d "$destdir" ]]
            then
              echo "Skipping postgres backup"
              return
            fi
            mkdir "$destdir"
            sudo -u postgres pg_dumpall --clean > "$destdir/databases.sql"
          mongodb: |
            destdir="$basedir/$name"
            if [[ -d "$destdir" ]]
            then
              echo "Skipping postgres backup"
              return
            fi
            mkdir "$destdir"
            mongodump --username=root --password=root --out="$destdir"
        restore_scripts:
          mariadb: |
            destdir="$basedir/$name"
            sudo -u mysql mysql < "$destdir/databases.sql"
          postgres: |
            destdir="$basedir/$name"
            sudo -u postgres psql -f - postgres < "$destdir/databases.sql"
          mongodb: |
            destdir="$basedir/$name"
            mongorestore --username=root --password=root "$destdir"

  tasks:
  # in case there were configuration changes that are required for the below
  - name: Restart databases now
    meta: flush_handlers

  - name: Ensure nextcloud db
    become: yes
    mysql_db:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ db.nextcloud.name }}"
      collation: utf8mb4_general_ci
      encoding: utf8mb4
      state: present

  - name: Ensure nextcloud user
    become: yes
    mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ db.nextcloud.user }}"
      password: "{{ db.nextcloud.pass }}"
      priv: "{{ db.nextcloud.name }}.*:ALL"
      host: 10.80.0.4
      state: present

  - name: Ensure wekan db and user
    mongodb_user:
      login_user: root
      login_password: root
      database: "{{ db.wekan.name }}"
      name: "{{ db.wekan.user }}"
      password: "{{ db.wekan.pass }}"
      roles: 'dbAdmin,readWrite'

  - name: Ensure xbrowsersync db and user
    mongodb_user:
      login_user: root
      login_password: root
      database: "{{ db.xbrowsersync.name }}"
      name: "{{ db.xbrowsersync.user }}"
      password: "{{ db.xbrowsersync.pass }}"
      roles: "readWrite"
    register: xbrowsersync_db

  - name: Copy xbrowsersync init db file
    template:
      src: db/xbrowsersync-mongo.js
      dest: /tmp/xbrowsersync-init.js
    when: xbrowsersync_db.changed

  - name: Init xbrowsersync db
    command: mongosh -u root -p root /tmp/xbrowsersync-init.js
    when: xbrowsersync_db.changed

  - name: Ensure Ore db
    become: yes
    become_user: postgres
    postgresql_db:
      login_unix_socket: /var/run/postgresql/
      name: "{{ db.ore.name }}"

  - name: Ensure Ore user
    become: yes
    become_user: postgres
    postgresql_user:
      login_unix_socket: /var/run/postgresql/
      name: "{{ db.ore.user }}"
      password: "{{ db.ore.pass }}"

  - name: Ensure ttrss db
    become: yes
    mysql_db:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ db.ttrss.name }}"
      collation: utf8mb4_general_ci
      encoding: utf8mb4
      state: present

  - name: Ensure ttrss user
    become: yes
    mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ db.ttrss.user }}"
      password: "{{ db.ttrss.pass }}"
      priv: "{{ db.ttrss.name }}.*:ALL"
      host: 10.80.0.4
      state: present

  - name: Ensure gitea db
    become: yes
    mysql_db:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ db.gitea.name }}"
      collation: utf8mb4_general_ci
      encoding: utf8mb4
      state: present

  - name: Ensure gitea user
    become: yes
    mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ db.gitea.user }}"
      password: "{{ db.gitea.pass }}"
      priv: "{{ db.gitea.name }}.*:ALL"
      host: 10.80.0.7
      state: present

